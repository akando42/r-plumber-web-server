mtcars
data(mtcars)
play()
dim(cars)
dim(mtcars)
head(mtcars)
summary(mtcars)
tail(mtcars)
str(mtcars)
swirl()
nxt()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot(cars$dist, cars$speed,x-lab="Speed")
plot(cars$dist, cars$speed,x-lab:"Speed")
plot(cars$dist, cars$speed,xlab:"Speed")
plot(cars$dist, cars$speed,xlab="Speed")
plot(cars$dist, y=cars$speed,"Speed")
plot(x=cars$dist, y=cars$speed,xlab="Speed")
plot(x=cars$speed, y=cars$dist,xlab="Speed")
plot(x=cars$speed, y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=)
plot(cars, col=2)
plot(cars, xlim=c(10, 15))
plot(cars, pch=2)
data(mtcars)
play()
nxt()
?boxplit
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplu)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
select(cran, -X:-size)
-5:20
-"5:20"
-(5:20)
select(cran, -(X:-size))
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparision
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran, size>100500 , r_os=="linux_gnu")
filter(cran, size > 100500 , r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
`is.na(c(3, 5, NA, 10))
`is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, ~is.na(r_version)==TRUE)
filter(cran, !is.na(r_version)==TRUE)
filter(cran, !is.na(r_version))
play()
nxt()
cran2 = select(cran, ip_id:store)
cran2 = select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arange(cran2, ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id
arrange(cran2, package, ip_id
arrange(cran2, package, ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 = select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
clear
swirl()
library(swirl)
Troy
swirl()
?dunif
runif(100, min=0, max=1)
my_uni <- runif(100, min=0, max=1)
plot(my_uni)
qunif(1/2, min=0, max=1, lower.tail = TRUE, log.p = FALSE)
my_vec <- 1:10
clear
clear
swirl()
library(dplyr)
tbl_df(pdf)
tbl_df(mypdf)
mypdf
my_frame <- tbl_df(mydf)
mydf
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarize(by_package, mean(size))
submit()
source('/var/folders/w6/30879qsx0t31tvpdl2gb69540000gn/T//Rtmpp9t3vC/summarize1.R')
source('/var/folders/w6/30879qsx0t31tvpdl2gb69540000gn/T//Rtmpp9t3vC/summarize1.R')
source('/var/folders/w6/30879qsx0t31tvpdl2gb69540000gn/T//Rtmpp9t3vC/summarize1.R')
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts = filter(cran, count > 679)
?filter
top_counts <- filter(cran, count > 679)
top_counts <- filter(by_packages, count > 679)
top_counts <- filter(by_package, count > 679)
by_package
top_counts <- filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
?arrange
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique = filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, unique
)
top_unique_sorted <- arrange(top_unique, unique )
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
by_package <- group_by(cran, package)
source('/var/folders/w6/30879qsx0t31tvpdl2gb69540000gn/T//Rtmpp9t3vC/summarize2.R')
submit()
submit()
submit()
View(result3)
source('/var/folders/w6/30879qsx0t31tvpdl2gb69540000gn/T//Rtmpp9t3vC/chain1.R')
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
tidyr()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students, key = sex_class, value = count, male_1, male_2, female_1, female_2 )
res <- gather(students, key = sex_class, value = count, -grade)
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
seperate()
?seperate
?serparate
?serparate
??serparate
?separate
seperate(res, sex_class, c("sex","class"))
separate(res, sex_class, c("sex","class"))
submit()
View(my_matrix2)
students3
submt()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
play()
nxt()
ls
swirf()
swirf()
library(swirl)
swirl()
students
students3
submit()
submit()
submit()
library(readr)
parse_number("class5")
mutate?
clearPushBack()
mutate()
?mutate
submit()
source('/var/folders/w6/30879qsx0t31tvpdl2gb69540000gn/T//RtmpCkmtUG/script4.R')
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class1:class5 = parse_number(class1:class5)) %>%
print
submit()
submit()
submit()
students4
submit()
submit()
submit()
students4
submit()
passed
failed
submit()
passed <- passsed %>% mutate(status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
?seperate
?separate
?separate
submit()
submit()
submit()
sat
submit()
submit()
submit()
submit()
submit()
ls
test_hello-world.R
source("./hello-world.R")
library(testthat)
hello_world <- function() {
"Hello World!"
}
hello_world <- function() {
"Hello World!"
}
source("./hello-world.R")
he
print("Hello World")
source('~/Exercism/r/hello-world/hello-world.R')
hello_world <- function() {
print("Hello World")
}
test_hello-world.R
test_hello-world.R
test_hello-world.R
context("hello world")
test_that("no name", {
expect_equal(hello_world(), "Hello, World!")
})
"Hello, World!"
Hello, World!
"Hello, World!"
"Hello, World!"
"Hello, World!"
test_hello-world.R
source("./hello-world.R")
library(testthat)
source('~/Exercism/r/hello-world/test_hello-world.R')
print(result)
result <- read.csv("/Users/troydo42/Desktop/2020/Voting Prediction/vote_predictions.csv")
result
View(results)
View(result)
dim(result)
head(result)
short_result < result(last_name, state, district, predicted_probability )
short_result <- result(last_name, state, district, predicted_probability )
short_result <- select(result, last_name, state, district, predicted_probability)
?select
dplr()
dplyr()
library(dplyr)
dplyr()
short_result <- select(result, last_name, state, district, predicted_probability)
short_result
short_result <- select(result, last_name, state, district, party, predicted_probability)
short_result
republicans <- filter(short_result, party=R)
republicans <- filter(short_result, party=="R")
republicans
View(republicans)
View(results)
View(result)
View(result)
short_result <- select(result, last_name, state, district, party, predicted_probability)
short_result <- select(result, bill_id, last_name, state, district, party, vote, trump_opposition, predicted_probability)
short_result <- select(result, bill_id, last_name, state, district, party, vote, trump_position, predicted_probability)
View(short_result)
republician = filter(short_reus)
republician = filter(short_result, party="R")
republician = filter(short_result, party=="R")
democrat = filter(short_result, party=="D")
mongod
exit
republican = filter(short_result, party=="R")
hist(republican)
mongod
install.packages("mongolite")
library(mongolite)
m <- mongo("mtcars", url = "mongodb://readwrite://yeaornay-q5vdv.mongodb.net/test" --username troydo42")
m <- mongo("mtcars", url = "mongodb://readwrite://yeaornay-q5vdv.mongodb.net/test" --username troydo42)
m <- mongo("mtcars", url = "mongodb+srv://troydo42:milkway42@yeaornay-q5vdv.mongodb.net/test?retryWrites=true")
m <- mongo("mtcars", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/test?retryWrites=true")
print(m)
type(republicans)
exit()
republicans
print(m)
test <- mongo()
print(m)
republicans <- mongo()
m <- mongo("mtcars", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/republicans?retryWrites=true")
print(m)
republicans <- mongo()
?mongo
m <- mongo(collection ="republicans", db="republicans", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/republicans?retryWrites=true")
print(m)
m$insert(republicans)
d <- mongo(collection ="democrats", db="democrats", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/democrats?retryWrites=true")
d$insert(democrat)
swirl()
library(swirl)
swirl()
republicans
result
democrat
View(result)
house <- filter(result, chamber=house)
house <- filter(result, chamber="house")
short_result <- select(result, chamber, bioguide, last_name, state, district, party, agree, yesno, predicted_probability) )
?select
ecit
exit
exit()
exit
?select
??select
import(tidyr)
library(tidyr)
?select
??select
library(dlypr)
library(dplyr)
?select
ls
result
View(result)
short_result <- select(result, chamber, bioguide, last_name, state, district, party, agree, yesno, predicted_probability) )
short_result <- select(result, chamber, bioguide, last_name, state, district, party, agree, yesno, predicted_probability)
View(short_result)
house_result <- filter(short_result, chanber=house)
house_result <- filter(short_result, chanber==house)
house_result <- filter(short_result, chamber==house)
house_result <- filter(short_result, chamber=="house)
exit
exit()
house_result <- filter(short_result, chamber=="house")
View(house_result)
?group
house_clean <- group_by(house_result, bioguide)
View(house_clean)
library(dyplr)
library(dpylr)
View(house_result)
View(house_clean)
house_clean <- group_by(house_result, bioguide)
?group_by
house_clean <- group_by(house_result, Bioguide)
house_clean <- group_by(house_result, bioguide)
house_clean
View(house_clean)
View(result)
short_result <- select(result, chamber, bill_id, bioguide, last_name, state, district, party, agree, yesno, predicted_probability)
house_result <- filter(short_result, chamber=="house")
senate_result <- filter(short_result, chamber=="senate")
View(senate_result)
h <- mongo(database="house", collection="house", url = "mongodb+srv://troydo42:@yeaornay-q5vdv.mongodb.net/house?retryWrites=true")
library(mongolite)
mongo
h <- mongo(database="house", collection="house", url = "mongodb+srv://troydo42:@yeaornay-q5vdv.mongodb.net/house?retryWrites=true")
h <- mongo(database="house", collection="house", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/house?retryWrites=true")
h <- mongo(database="house", collection="house", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/house?retryWrites=true")
h <- mongo(db="house", collection="house", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/house?retryWrites=true")
h$insert(house_result)
s <- mongo(database="senate", collection="senate", url = "mongodb+srv://troydo42:@yeaornay-q5vdv.mongodb.net/senate?retryWrites=true")
s <- mongo(db="senate", collection="senate", url = "mongodb+srv://troydo42:@yeaornay-q5vdv.mongodb.net/senate?retryWrites=true")
s <- mongo(db="senate", collection="senate", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/senate?retryWrites=true")
s$insert(senate_result)
View(senate_result)
senator <- mongo(db="senator", collection="senator", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/senator?retryWrites=true")
senator$insert(senate_result)
senators <- mongo(db="senators", collection="senators", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/senators?retryWrites=true")
senators$insert(senate_result)
Senators <- mongo(db="Senators", collection="Senators", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/Senators?retryWrites=true")
Senator$insert(senate_result)
Senators$insert(senate_result)
Senator <- mongo(db="Senator", collection="Senator", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/Senator?retryWrites=true")
Senator$insert(senate_result)
install.packages("tidyverse")
library(tidyverse)
install.packages(c("assertthat", "boot", "callr", "caTools", "class", "cli", "cluster", "codetools", "colorspace", "e1071", "edgar", "ellipsis", "foreign", "fs", "git2r", "haven", "highr", "httpuv", "lattice", "lazyeval", "MASS", "Matrix", "mgcv", "modelr", "mongolite", "nlme", "openssl", "pkgbuild", "processx", "purrr", "Rcpp", "RCurl", "readxl", "rgdal", "rlang", "rmarkdown", "rpart", "rstudioapi", "survival", "tibble"))
s <- mongo(db="senate", collection="senate", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/senate?retryWrites=true")
ls
ls
pnor,
?pnorm
?dnorm
dnorm(0.5, mean=0)
pnorm(0.05, mean=0)
qnorm(0.05, mean=0)
qnorm(0.95, mean=0)
dnorm(0.05, mean=0)
dnorm(0.05, mean=12)
dnorm(0.05, mean=1)
dnorm(0.05, mean=100)
qnorm(0.05, mean=100)
dnorm(0.05, mean=100)
dnorm(0.05, mean=0)
dnorm(19, mean=100)
dnorm(90, mean=100)
pnorm(90, mean=100)
LS
library(plumber)
r <- plumb("app.R")
setwd("~/Desktop/2020/Shiny/CaseLaw")
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
?read_html
r <- plumb("app.R")
r$run(port=8000)
?xml
?xml2
?xml2
?xml2_example
html <- <a href="mailto:elbolero@argconcepts.com">EMAIL US</a>
html <- "<a href="mailto:elbolero@argconcepts.com">EMAIL US</a>"
html <- '<a href="mailto:elbolero@argconcepts.com">EMAIL US</a>'
html_attr(html, href)
html <- html_nodes(<a href="mailto:elbolero@argconcepts.com">EMAIL US</a>)
r <- plumb("app.R")
r$run(port=8000)
?html_attr
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
lapply
?lapply()
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
