short_result
short_result <- select(result, last_name, state, district, party, predicted_probability)
short_result
republicans <- filter(short_result, party=R)
republicans <- filter(short_result, party=="R")
republicans
View(republicans)
View(results)
View(result)
View(result)
short_result <- select(result, last_name, state, district, party, predicted_probability)
short_result <- select(result, bill_id, last_name, state, district, party, vote, trump_opposition, predicted_probability)
short_result <- select(result, bill_id, last_name, state, district, party, vote, trump_position, predicted_probability)
View(short_result)
republician = filter(short_reus)
republician = filter(short_result, party="R")
republician = filter(short_result, party=="R")
democrat = filter(short_result, party=="D")
mongod
exit
republican = filter(short_result, party=="R")
hist(republican)
mongod
install.packages("mongolite")
library(mongolite)
m <- mongo("mtcars", url = "mongodb://readwrite://yeaornay-q5vdv.mongodb.net/test" --username troydo42")
m <- mongo("mtcars", url = "mongodb://readwrite://yeaornay-q5vdv.mongodb.net/test" --username troydo42)
m <- mongo("mtcars", url = "mongodb+srv://troydo42:milkway42@yeaornay-q5vdv.mongodb.net/test?retryWrites=true")
m <- mongo("mtcars", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/test?retryWrites=true")
print(m)
type(republicans)
exit()
republicans
print(m)
test <- mongo()
print(m)
republicans <- mongo()
m <- mongo("mtcars", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/republicans?retryWrites=true")
print(m)
republicans <- mongo()
?mongo
m <- mongo(collection ="republicans", db="republicans", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/republicans?retryWrites=true")
print(m)
m$insert(republicans)
d <- mongo(collection ="democrats", db="democrats", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/democrats?retryWrites=true")
d$insert(democrat)
swirl()
library(swirl)
swirl()
republicans
result
democrat
View(result)
house <- filter(result, chamber=house)
house <- filter(result, chamber="house")
short_result <- select(result, chamber, bioguide, last_name, state, district, party, agree, yesno, predicted_probability) )
?select
ecit
exit
exit()
exit
?select
??select
import(tidyr)
library(tidyr)
?select
??select
library(dlypr)
library(dplyr)
?select
ls
result
View(result)
short_result <- select(result, chamber, bioguide, last_name, state, district, party, agree, yesno, predicted_probability) )
short_result <- select(result, chamber, bioguide, last_name, state, district, party, agree, yesno, predicted_probability)
View(short_result)
house_result <- filter(short_result, chanber=house)
house_result <- filter(short_result, chanber==house)
house_result <- filter(short_result, chamber==house)
house_result <- filter(short_result, chamber=="house)
exit
exit()
house_result <- filter(short_result, chamber=="house")
View(house_result)
?group
house_clean <- group_by(house_result, bioguide)
View(house_clean)
library(dyplr)
library(dpylr)
View(house_result)
View(house_clean)
house_clean <- group_by(house_result, bioguide)
?group_by
house_clean <- group_by(house_result, Bioguide)
house_clean <- group_by(house_result, bioguide)
house_clean
View(house_clean)
View(result)
short_result <- select(result, chamber, bill_id, bioguide, last_name, state, district, party, agree, yesno, predicted_probability)
house_result <- filter(short_result, chamber=="house")
senate_result <- filter(short_result, chamber=="senate")
View(senate_result)
h <- mongo(database="house", collection="house", url = "mongodb+srv://troydo42:@yeaornay-q5vdv.mongodb.net/house?retryWrites=true")
library(mongolite)
mongo
h <- mongo(database="house", collection="house", url = "mongodb+srv://troydo42:@yeaornay-q5vdv.mongodb.net/house?retryWrites=true")
h <- mongo(database="house", collection="house", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/house?retryWrites=true")
h <- mongo(database="house", collection="house", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/house?retryWrites=true")
h <- mongo(db="house", collection="house", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/house?retryWrites=true")
h$insert(house_result)
s <- mongo(database="senate", collection="senate", url = "mongodb+srv://troydo42:@yeaornay-q5vdv.mongodb.net/senate?retryWrites=true")
s <- mongo(db="senate", collection="senate", url = "mongodb+srv://troydo42:@yeaornay-q5vdv.mongodb.net/senate?retryWrites=true")
s <- mongo(db="senate", collection="senate", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/senate?retryWrites=true")
s$insert(senate_result)
View(senate_result)
senator <- mongo(db="senator", collection="senator", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/senator?retryWrites=true")
senator$insert(senate_result)
senators <- mongo(db="senators", collection="senators", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/senators?retryWrites=true")
senators$insert(senate_result)
Senators <- mongo(db="Senators", collection="Senators", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/Senators?retryWrites=true")
Senator$insert(senate_result)
Senators$insert(senate_result)
Senator <- mongo(db="Senator", collection="Senator", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/Senator?retryWrites=true")
Senator$insert(senate_result)
install.packages("tidyverse")
library(tidyverse)
install.packages(c("assertthat", "boot", "callr", "caTools", "class", "cli", "cluster", "codetools", "colorspace", "e1071", "edgar", "ellipsis", "foreign", "fs", "git2r", "haven", "highr", "httpuv", "lattice", "lazyeval", "MASS", "Matrix", "mgcv", "modelr", "mongolite", "nlme", "openssl", "pkgbuild", "processx", "purrr", "Rcpp", "RCurl", "readxl", "rgdal", "rlang", "rmarkdown", "rpart", "rstudioapi", "survival", "tibble"))
s <- mongo(db="senate", collection="senate", url = "mongodb+srv://troydo42:LessIsMore42!@yeaornay-q5vdv.mongodb.net/senate?retryWrites=true")
ls
ls
pnor,
?pnorm
?dnorm
dnorm(0.5, mean=0)
pnorm(0.05, mean=0)
qnorm(0.05, mean=0)
qnorm(0.95, mean=0)
dnorm(0.05, mean=0)
dnorm(0.05, mean=12)
dnorm(0.05, mean=1)
dnorm(0.05, mean=100)
qnorm(0.05, mean=100)
dnorm(0.05, mean=100)
dnorm(0.05, mean=0)
dnorm(19, mean=100)
dnorm(90, mean=100)
pnorm(90, mean=100)
LS
bind_tf_idf
?bind_tf_idf
library(stringi)
?bind_tf_idf
setwd("~/Desktop/2020/Shiny/CaseLaw")
library(bind_tf_idf)
library(tidytext)
?bind_tf_idf
library(httr)
library(tidyverse)
library(tidytext)
library(stringr)
library(wordcloud2)
library(XML)
library(R.utils)
library(ggplot2)
search_case <- function(phrase, database){
case_law_url <- "https://api.case.law/v1/"
free_law_url <- "https://www.courtlistener.com/api/rest/v3/"
get_response <- function(request_url){
response <- GET(request_url)
response_content <- content(response, "parsed")
response_content$results
}
if(database == "case_law"){
request_url <- paste0(case_law_url, "citations?search=", phrase)
return(get_response(request_url))
} else {
request_url <- paste0(free_law_url, "search/?q=", phrase)
return(get_response(request_url))
}
}
response <- search_case("felony assault","free_law")
View(response)
response <- search_case("defamation ","free_law")
View(response)
search_case <- function(phrase, database){
case_law_url <- "https://api.case.law/v1/"
free_law_url <- "https://www.courtlistener.com/api/rest/v3/"
get_response <- function(request_url){
response <- GET(request_url)
response_content <- content(response, "parsed")
response_content$results
}
if(database == "case_law"){
request_url <- paste0(case_law_url, "citations?search=", phrase)
return(get_response(request_url))
} else {
request_url <- paste0(free_law_url, "search/?q=", phrase)
return(get_response(request_url))
}
}
response <- search_case("defamation","free_law")
View(response)
defamation_precedents <- search_case("defamation","free_law")
felony_assault_precedents <- search_case("felony assault","free_law")
test_case <- felony_assault_precedents[[1]]
View(test_case)
test_case <- felony_assault_precedents[1]
View(test_case)
test_case <- felony_assault_precedents[[1]]
felony_assault_precedents[1]
felony_assault_precedents
felony_assault_precedents <- search_case("felony assault","free_law")
felony_assault_precedents
felony_assault_precedents <- search_case("felony assault","free_law")
defamation_precedents <- search_case("defamation","free_law")
felony_assault_precedents <- search_case("felony assault","free_law")
felony_assault_precedents <- search_case("assault","free_law")
defamation_precedents[[1]]
case_sample <- defamation_precedents[[1]]
View(case_sample)
get_case_text <-function(case_response){
free_law_url <- "https://www.courtlistener.com/api/rest/v3"
case_number <- case_response$id
snippet <- case_response$snippet
opinion_url <- paste0(free_law_url,"/opinions/", case_number)
opinion_response <- GET(opinion_url)
opinion_content <- content(opinion_response,"parsed")
results <- opinion_content
return(results$html)
}
case_sample_text <- get_case_text(case_sample)
View(case_sample_text)
html2txt <- function(html_content){
# Read and parse HTML file
doc.html = htmlTreeParse(html_content, useInternal=TRUE)
# Extract all the paragraphs (HTML tag is p, starting at
# the root of the document). Unlist flattens the list to
# create a character vector.
doc.text = unlist(xpathApply(doc.html, '//p', xmlValue))
# Replace all by spaces
doc.text = gsub('\n', ' ', doc.text)
# Join all the elements of the character vector into a single
# character string, separated by spaces
#doc.text = paste(doc.text, collapse = ' ')
return(doc.text)
}
case_sample_text <- html2txt(case_sample_text)
View(case_sample_text)
text2words <- function(case_text){
case_df <- tibble(case_text)
word_df <- unnest_tokens(case_df, word, case_text)
words <- anti_join(word_df, stop_words)
dplyr::count(words, word, sort=TRUE)
return(words)
}
case_sample_words <- text2words(case_sample_text)
View(case_sample_words
View(case_sample_words)
bind_tf_idf(case_sample_words)
class(case_sample_words)
library(dplyr)
library(janeaustenr)
library(janeaustenr)
library(dplyr)
library(janeaustenr)
book_words <- austen_books() %>%
unnest_tokens(word, text) %>%
count(book,word,sort=TRUE)
book_words
book_words %>%
bind_tf_idf(word, book, n) %>%
arrange(desc(tf_idf))
bind_tf_idf(case_sample_words, word)
View(case_sample_words)
?count
bind_tf_idf(case_sample_words, word)
?bind_tf_idf
book_words <- austen_books() %>%
unnest_tokens(word, text) %>%
count(book,word,sort=TRUE)
View(book_words)
case_sample[["snippet"]]
rvest
library(rvest)
?rvest
landing_page <- read_html("https://www.rondahayneslaw.com/")
head(html_attr(html_nodes(landing_page, "a"), "href"))
View(landing_page)
landing_page <- read_html("https://www.rondahayneslaw.com")
View(landing_page)
head(html_attr(html_nodes(landing_page, "a"), "href"))
str_detect(landing_page, "mailto")
str_detect(landing_page, "a")
head(html_attr(html_nodes(landing_page, "a"), "mailto"))
head(html_attr(html_nodes(landing_page, "a"), "href"))
landing_page <- read_html("https://www.rondahayneslaw.com/")
html_node(landing_page, "a")
html_nodes(landing_page, "a")
all_links
all_links <- html_nodes(landing_page)
all_links <- html_nodes(landing_page, "a")
all_links$href
all_links[1]
html_attr(all_links[1])
html_attr(all_links[1], name=href)
html_attr(all_links[1], name="href")
for(link in links){}
for(link in links){html_attr(link, name="href")}
for(link in all_links){html_attr(link, name="href")}
lapply(all_links, html_attr(name="href"))
lapply(all_links, html_attr(all_links, name="href"))
lapply(all_links, html_attr(name="href"))
?lapply
lapply(all_links, html_attr(all_links, ]name="href"))
lapply(all_links, html_attr(all_links, name="href"))
lapply(all_links, html_attr(name="href"))
?select
View(all_links
View(all_links)
View(all_links)
html_attrs(all_links, name="href")
?html_attrs
?html_attr
email <- landing_page %>%
html_nodes()
html_attr(name="href")
email <- landing_page %>%
html_nodes("a")
html_attr(name="href")
html_nodes("a")
str_detect("<a href="mailto:contact@rondahayneslaw.com">contact@rondahayneslaw.com</a>", "mailto")
str_detect(all_links, "mailto")
str_which(all_links, "mailto")
all_links[4]
all_links[51]
all_links[54]
email_locations <- str_which(all_links, "mailto")
all_links
email_locations <- str_which(all_links, "mailto")
str_which(all_links, "mailto")
View(email_locations)
all_links[email_locations]
email_links <- all_links[email_locations]
html_text(email_links)
emails <- html_text(email_links)
emails[1]
emails[2]
download_html <- function(url){
landing_page <- read_html(url)
all_links <- html_nodes(landing_page, "a")
email_locations <- str_which(all_links, "mailto")
email_links <- all_links[email_locations]
emails <- html_text(email_links)
}
find_emails <- function(url){
landing_page <- read_html(url)
all_links <- html_nodes(landing_page, "a")
email_locations <- str_which(all_links, "mailto")
email_links <- all_links[email_locations]
emails <- html_text(email_links)
return(emails)
}
find_emails("https://www.mjbgroup-dallas.com/")
find_emails("https://thecommondesk.com/")
find_emails("https://thecommondesk.com/contact")
find_emails("https://thecommondesk.com/contac-us")
find_emails("https://thecommondesk.com/contact")
find_emails("https://thecommondesk.com/about")
find_emails("https://thecommondesk.com/about-us")
?apply(array, margin, ...)
get_link <- function(dom_a){
html_attr(dom_a, name="href")
}
get_link
get_link(
<a class="skip-link screen-reader-text" href="#content">Skip to content</a>
)
get_link(<a class="skip-link screen-reader-text" href="#content">Skip to content</a>)
length(all_links)
for (n in range(1:length(all_links))){
html_attr(all_links[n], name="href")
}
all_urls <- for (n in range(1:length(all_links))){
html_attr(all_links[n], name="href")
}
View(all_urls)
all_urls <- for (n in 1:length(all_links)){
html_attr(all_links[n], name="href")
}
all_urls <- for (n in 1:length(all_links)){
html_attr(all_links[n], name="href")
}
all_urls <- for (n in 1:length(all_links)){
html_attr(all_links[1], name="href")
}
View(all_urls)
all_links
all_urls <- for (n in 1:length(all_links)){
html_attr(all_links[1], name="href")
}
View(all_urls)
all_urls <- for (n in 1:length(all_links)){
return(html_attr(all_links[1], name="href"))
}
for (n in 1:length(all_links)){
link <- html_attr(all_links[n], name="href")
link
}
for (n in 1:length(all_links)){
link <- html_attr(all_links[n], name="href")
link
}
for (n in 1:length(all_links)){
html_attr(all_links[n], name="href")
}
url <- "https://www.rondahayneslaw.com/"
find_emial
find_emails(url)
library(plumber)
r <- plumb("app.R")
r$run(port=8000)
# Running Plumber Server
library(plumber)
r <- plumb("app.R")
r$run(port=8000)
# Running Plumber Server
library(plumber)
r <- plumb("app.R")
r$run(port=8000)
# Running Plumber Server
library(plumber)
r <- plumb("app.R")
r$run(port=8000)
library(plumber)
r <- plumb("app.R")
r$run(port=8000)
library(plumber)
r <- plumb("app.R")
r$run(port=8000)
r
run()
run
run()
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
landing <- PlumberStatic$new("./static/veritas.html")
r$mount("/", landing)
r$run(port=8000)
landing <- PlumberStatic$new("./files/static/veritas.html")
r$mount("/", landing)
r$run(port=8000)
landing <- PlumberStatic$new("./files/static/veritas.html")
landing
landing <- PlumberStatic$new("./files/static/")
landing
r$mount("/", landing)
r$run(port=8000)
r <- plumb("app.R")
r$mount("/", landing)
r$run(port=8000)
landing <- PlumberStatic$new("./files/static/")
r <- plumb("app.R")
r$run(port=8000)
r <- plumb("app.R")
r$run(port=8000)
landing <- PlumberStatic$new("./files/static/")
r$mount("/", landing)
r$run(port=8000)
analogsea
install.packages("analogsea")
analogsea::droplet()
analogsea::droplets()
analogue::install_r_package()
analogsea::install_r_package()
analogsea::install_r_package("infinity-and-beyond")
install.packages("jetpack")
mydrop <- plumber::do_provision()
analogsea::droplets()
analogsea::account()
analogsea::account()
analogsea::droplets()
